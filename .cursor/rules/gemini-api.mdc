---
globs: *.py
description: "Guidelines for using the Google Gemini API in this project"
---

# Gemini API Usage Guidelines

## API Client Pattern

Always use thread-local clients for parallel processing:

```python
thread_local = threading.local()

def get_client():
    if not hasattr(thread_local, 'client'):
        thread_local.client = genai.Client(api_key=GEMINI_API_KEY)
    return thread_local.client
```

## API Call Pattern

Use the new `google-genai` package format with retry logic:

```python
from google import genai
from google.genai import types

response = client.models.generate_content(
    model=model,  # "gemini-2.5-flash" or "gemini-2.5-pro"
    contents=prompt,
    config=types.GenerateContentConfig(
        thinking_config=types.ThinkingConfig(thinking_budget=1024)
    )
)
```

## Error Handling

Always wrap API calls with retry logic using tenacity:

```python
@retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=4, max=10)
)
def make_api_call_with_retry(client, prompt):
    # API call here
```

## Environment Variables

Requires `GEMINI_API_KEY` in `.env` file for authentication.
